"use client"

import { useState, useEffect, useCallback } from "react" // Import useEffect and useCallback
import Link from "next/link"
import { ArrowLeft, Edit, Plus, Search, Trash, Loader2 } from "lucide-react" // Import Loader2
import { Button } from "@/src/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/src/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/src/components/ui/dialog"
import { Input } from "@/src/components/ui/input"
import { Label } from "@/src/components/ui/label"
import { Switch } from "@/src/components/ui/switch"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/src/components/ui/table"
import { Tabs, TabsContent } from "@/src/components/ui/tabs" 
import { createClient } from "@/src/utils/supabase/client" 
import { useToast } from "@/src/components/ui/use-toast" // Import useToast


// Define Employee type based on expected Supabase data
type Employee = {
  id: string; // Supabase user ID (UUID)
  full_name: string | null;
  email: string | null;
  role: string | null; // Assuming a 'role' column exists in your 'users' table
  is_active: boolean; // Assuming an 'is_active' column
  employee_id: string;// Add other relevant fields from your 'users' table if needed
};

export default function AdminPage() {
  const supabase = createClient()
  const { toast } = useToast() // Get toast function from the hook
  const [employees, setEmployees] = useState<Employee[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [newEmployee, setNewEmployee] = useState({
    // id is generated by Supabase Auth
    full_name: "",
    employee_id: "", // Assuming you have a unique employee ID
    email: "",
    password: "",
    role: "Employee", // Default role
    is_active: true,
  })
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null)
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false); // State for form submission loading

  // Fetch employees function
  const fetchEmployees = useCallback(async () => {
    setLoading(true);
    // Fetch users from your 'users' table (adjust table/column names if different)
    const { data, error } = await supabase
      .from('users') // Assuming your table is named 'users'
      .select('id, employee_id, full_name, email, role, is_active'); // Select necessary columns

    if (error) {
      console.error("Error fetching employees:", error);
      // Replace sonner toast with shadcn toast
      toast({
        title: "Error",
        description: "Failed to load employees.",
        variant: "destructive",
      });
      setEmployees([]);
    } else {
      // Ensure email is not null/undefined for filtering/display
      const formattedData = data?.map(emp => ({
        ...emp,
        email: emp.email ?? '', // Provide default empty string if email is null
        employee_id: emp.employee_id ?? '', // Provide default empty string if employee_id is null
        full_name: emp.full_name ?? 'N/A', // Provide default if name is null
        role: emp.role ?? 'N/A', // Provide default if role is null
        is_active: emp.is_active ?? false // Provide default if is_active is null
      })) || [];
      setEmployees(formattedData);
    }
    setLoading(false);
  }, [supabase, toast]); // Add toast to dependency array

  // Initial fetch
  useEffect(() => {
    fetchEmployees();
  }, [fetchEmployees]);

  const filteredEmployees = employees.filter(
    (employee) =>
      employee.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      employee.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      employee.employee_id.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  // --- CRUD Operations ---

  const handleAddEmployee = async () => {
    if (!newEmployee.email || !newEmployee.password || !newEmployee.full_name) {
        // Replace sonner toast with shadcn toast
        toast({
            title: "Error",
            description: "Please fill in all required fields (Name, Email, Password).",
            variant: "destructive",
        });
        return;
    }
    setIsSubmitting(true);

    try {
        // 1. Create user in Supabase Auth
        const { data: authData, error: authError } = await supabase.auth.signUp({
            email: newEmployee.email,
            password: newEmployee.password,
            options: {
                // Add user metadata immediately if needed, or update the 'users' table separately
                data: {
                    full_name: newEmployee.full_name,
                    role: newEmployee.role,
                    is_active: newEmployee.is_active,
                    // Add other metadata if necessary
                },
            },
        });

        if (authError) throw authError;

        // 2. Optionally update the 'users' table if signUp options.data doesn't suffice
        //    or if you have triggers handling this. If signUp handles it, this might be redundant.
        if (authData.user) {
            const { error: profileError } = await supabase
                .from('users')
                .update({
                    full_name: newEmployee.full_name,
                    employee_id: newEmployee.employee_id, // Add employee_id here
                    role: newEmployee.role,
                    is_active: newEmployee.is_active,
                    // email is usually handled by Auth, ensure your table schema matches
                })
                .eq('id', authData.user.id);

            if (profileError) {
                // Handle potential profile update error (e.g., log it, notify user)
                // Depending on your setup, the user might exist in auth but not fully in 'users'
                console.warn("Auth user created, but profile update failed:", profileError);
                // Replace sonner toast with shadcn toast (using default variant for warning)
                toast({
                    title: "Warning",
                    description: "User created, but profile update failed. Please check manually.",
                });
            }
        } else {
             throw new Error("User creation succeeded but no user data returned.");
        }


        // Replace sonner toast with shadcn toast
        toast({
            title: "Success",
            description: "Employee added successfully!",
        });
        setNewEmployee({ full_name: "", employee_id: "", email: "", password: "", role: "Employee", is_active: true });
        setIsAddDialogOpen(false);
        fetchEmployees(); // Refresh the list
    } catch (error: any) {
        console.error("Error adding employee:", error);
        // Replace sonner toast with shadcn toast
        toast({
            title: "Error",
            description: `Failed to add employee: ${error.message}`,
            variant: "destructive",
        });
    } finally {
        setIsSubmitting(false);
    }
};


  const handleEditEmployee = async () => {
    if (!editingEmployee) return;
    setIsSubmitting(true);

    try {
      // Update the user's profile data in the 'users' table
      const { error } = await supabase
        .from('users')
        .update({
          full_name: editingEmployee.full_name,
          employee_id: editingEmployee.employee_id, // Assuming you want to update this too
          email: editingEmployee.email, // Be cautious updating email directly if it's linked to Auth login
          role: editingEmployee.role,
          is_active: editingEmployee.is_active,
        })
        .eq('id', editingEmployee.id);

      if (error) throw error;

      // Note: Updating email/password via admin functions might be needed
      // if you want to change the actual Supabase Auth credentials.
      // This example only updates the 'users' table profile data.

      // Replace sonner toast with shadcn toast
      toast({
        title: "Success",
        description: "Employee updated successfully!",
      });
      setEditingEmployee(null);
      setIsEditDialogOpen(false);
      fetchEmployees(); // Refresh list
    } catch (error: any) {
      console.error("Error updating employee:", error);
      // Replace sonner toast with shadcn toast
      toast({
        title: "Error",
        description: `Failed to update employee: ${error.message}`,
        variant: "destructive",
      });
    } finally {
        setIsSubmitting(false);
    }
  };

  // Option 1: Soft Delete (Mark as inactive) - Recommended for client-side
  const handleDeleteEmployee = async (id: string) => {
      if (!window.confirm("Are you sure you want to deactivate this employee?")) return;
      setIsSubmitting(true); // Use submitting state for delete as well

      try {
          const { error } = await supabase
              .from('users')
              .update({ is_active: false }) // Set is_active to false
              .eq('id', id);

          if (error) throw error;

          // Replace sonner toast with shadcn toast
          toast({
            title: "Success",
            description: "Employee deactivated successfully.",
          });
          fetchEmployees(); // Refresh list
      } catch (error: any) {
          console.error("Error deactivating employee:", error);
          // Replace sonner toast with shadcn toast
          toast({
            title: "Error",
            description: `Failed to deactivate employee: ${error.message}`,
            variant: "destructive",
          });
      } finally {
          setIsSubmitting(false);
      }
  };

  // Option 2: Hard Delete (Requires Admin privileges, potentially server-side function)
  // const handleDeleteEmployee = async (id: string) => {
  //   if (!window.confirm("Are you sure you want to permanently delete this employee? This cannot be undone.")) return;
  //   // **Security Warning:** Deleting users directly from the client requires elevated privileges
  //   // and is generally NOT recommended. Use a server-side function (Supabase Edge Function)
  //   // triggered by the client for secure deletion.
  //   // Example (Conceptual - Requires Admin API):
  //   // const { data, error } = await supabase.auth.admin.deleteUser(id)
  //   // if (error) { ... handle error ... }
  //   // else { ... handle success, refresh list ... }
  //   toast.warning("Hard delete not implemented securely on client-side.");
  // };

  const handleToggleActive = async (id: string, currentStatus: boolean) => {
    // No need for separate submitting state here as Switch provides instant feedback,
    // but we update the backend.
    try {
      const { error } = await supabase
        .from('users')
        .update({ is_active: !currentStatus })
        .eq('id', id);

      if (error) throw error;

      // Replace sonner toast with shadcn toast
      toast({
        title: "Success",
        description: `Employee status updated.`,
      });
      // Update local state immediately for responsiveness
      setEmployees(employees.map((emp) => (emp.id === id ? { ...emp, is_active: !currentStatus } : emp)));
      // Optionally re-fetch to ensure consistency, though local update is faster UI-wise
      // fetchEmployees();
    } catch (error: any) {
      console.error("Error toggling employee status:", error);
      // Replace sonner toast with shadcn toast
      toast({
        title: "Error",
        description: `Failed to update status: ${error.message}`,
        variant: "destructive",
      });
      // Optionally revert local state change on error
    }
  };


  // --- Render Logic ---

  return (
    <div className="container mx-auto py-8">
      {/* ... (rest of the header/navigation remains the same) ... */}
       <div className="mb-6 flex items-center">
        <Button variant="ghost" size="icon" asChild className="mr-2">
          <Link href="/">
            <ArrowLeft className="h-5 w-5" />
          </Link>
        </Button>
        <h1 className="text-2xl font-bold">Admin Dashboard</h1>
      </div>

      <Tabs defaultValue="users">
        <TabsContent value="users">
          <Card>
            <CardHeader>
              <CardTitle>Employee Management</CardTitle>
              <CardDescription>Create, view, and manage employee accounts</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                {/* Search Input */}
                <div className="relative w-full max-w-sm">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search by name, email, or ID..."
                    className="pl-8"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                {/* Add Employee Dialog */}
                <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
                  <DialogTrigger asChild>
                    <Button className="flex items-center gap-1">
                      <Plus className="h-4 w-4" />
                      Add Employee
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Add New Employee</DialogTitle>
                      <DialogDescription>Create a new employee profile.</DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      {/* Removed ID field - generated by Supabase */}
                      <div className="grid gap-2">
                        <Label htmlFor="name">Full Name *</Label>
                        <Input
                          id="name"
                          value={newEmployee.full_name}
                          onChange={(e) => setNewEmployee({ ...newEmployee, full_name: e.target.value })}
                          disabled={isSubmitting}
                        />
                      </div>
                      {/* Add Employee ID input */}
                      <div className="grid gap-2">
                        <Label htmlFor="employee_id">Employee ID</Label>
                        <Input
                          id="employee_id"
                          value={newEmployee.employee_id}
                          onChange={(e) => setNewEmployee({ ...newEmployee, employee_id: e.target.value })}
                          disabled={isSubmitting}
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="email">Email *</Label>
                        <Input
                          id="email"
                          type="email"
                          value={newEmployee.email}
                          onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}
                          disabled={isSubmitting}
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="password">Password *</Label>
                        <Input
                          id="password"
                          type="password"
                          value={newEmployee.password}
                          onChange={(e) => setNewEmployee({ ...newEmployee, password: e.target.value })}
                          disabled={isSubmitting}
                        />
                      </div>
                       <div className="grid gap-2">
                        <Label htmlFor="role">Role</Label>
                        {/* Consider using a Select component here for predefined roles */}
                        <Input
                          id="role"
                          value={newEmployee.role}
                          onChange={(e) => setNewEmployee({ ...newEmployee, role: e.target.value })}
                           disabled={isSubmitting}
                        />
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch
                          id="active"
                          checked={newEmployee.is_active}
                          onCheckedChange={(checked) => setNewEmployee({ ...newEmployee, is_active: checked })}
                          disabled={isSubmitting}
                        />
                        <Label htmlFor="active">Active</Label>
                      </div>
                    </div>
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setIsAddDialogOpen(false)} disabled={isSubmitting}>
                        Cancel
                      </Button>
                      <Button onClick={handleAddEmployee} disabled={isSubmitting}>
                         {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                        {isSubmitting ? 'Adding...' : 'Add Employee'}
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>

              {/* Employee Table */}
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Employee ID</TableHead> {/* Changed header */}
                      <TableHead>Name</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Role</TableHead> {/* Added Role column */}
                      <TableHead>Status</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={6} className="h-24 text-center">
                          <Loader2 className="mx-auto h-6 w-6 animate-spin text-muted-foreground" />
                          <p>Loading employees...</p>
                        </TableCell>
                      </TableRow>
                    ) : filteredEmployees.length > 0 ? (
                      filteredEmployees.map((employee) => (
                        <TableRow key={employee.id}>
                          {/* Display employee_id instead of id */}
                          <TableCell className="font-medium truncate max-w-[100px]" title={employee.employee_id}>{employee.employee_id}</TableCell>
                          <TableCell>{employee.full_name}</TableCell>
                          <TableCell>{employee.email}</TableCell>
                          <TableCell>{employee.role}</TableCell> {/* Display Role */}
                          <TableCell>
                            <div className="flex items-center space-x-2">
                              <Switch
                                id={`active-${employee.id}`}
                                checked={employee.is_active}
                                onCheckedChange={() => handleToggleActive(employee.id, employee.is_active)}
                              />
                              <Label htmlFor={`active-${employee.id}`} className="text-sm">
                                {employee.is_active ? "Active" : "Inactive"}
                              </Label>
                            </div>
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end space-x-1">
                              {/* Edit Dialog */}
                              <Dialog
                                open={isEditDialogOpen && editingEmployee?.id === employee.id}
                                onOpenChange={(isOpen) => {
                                    if (!isOpen) setEditingEmployee(null); // Clear editing state on close
                                    setIsEditDialogOpen(isOpen);
                                }}
                              >
                                <DialogTrigger asChild>
                                  <Button variant="ghost" size="icon" onClick={() => {
                                      setEditingEmployee(employee); // Set the employee to be edited
                                      setIsEditDialogOpen(true); // Open the dialog
                                  }}>
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                </DialogTrigger>
                                {/* Render DialogContent only when editingEmployee is set */}
                                {editingEmployee && editingEmployee.id === employee.id && (
                                  <DialogContent>
                                    <DialogHeader>
                                      <DialogTitle>Edit Employee</DialogTitle>
                                      <DialogDescription>Update employee information.</DialogDescription>
                                    </DialogHeader>
                                    <div className="grid gap-4 py-4">
                                      <div className="grid gap-2">
                                        <Label htmlFor="edit-id">Auth ID</Label> {/* Keep Auth ID for reference */}
                                        <Input id="edit-id" value={editingEmployee.id} disabled />
                                      </div>
                                      <div className="grid gap-2">
                                        <Label htmlFor="edit-name">Full Name</Label>
                                        <Input
                                          id="edit-name"
                                          value={editingEmployee.full_name ?? ''}
                                          onChange={(e) =>
                                            setEditingEmployee({ ...editingEmployee, full_name: e.target.value })
                                          }
                                          disabled={isSubmitting}
                                        />
                                      </div>
                                      {/* Add Employee ID input for editing */}
                                      <div className="grid gap-2">
                                        <Label htmlFor="edit-employee-id">Employee ID</Label>
                                        <Input
                                          id="edit-employee-id"
                                          value={editingEmployee.employee_id ?? ''}
                                          onChange={(e) =>
                                            setEditingEmployee({ ...editingEmployee, employee_id: e.target.value })
                                          }
                                          disabled={isSubmitting} // Or make it always disabled if it shouldn't change
                                        />
                                      </div>
                                      <div className="grid gap-2">
                                        <Label htmlFor="edit-email">Email</Label>
                                        <Input
                                          id="edit-email"
                                          type="email"
                                          value={editingEmployee.email ?? ''}
                                          onChange={(e) =>
                                            setEditingEmployee({ ...editingEmployee, email: e.target.value })
                                          }
                                          disabled={isSubmitting}
                                          // Consider disabling email edit or using Supabase admin functions if needed
                                        />
                                      </div>
                                       <div className="grid gap-2">
                                        <Label htmlFor="edit-role">Role</Label>
                                        <Input
                                          id="edit-role"
                                          value={editingEmployee.role ?? ''}
                                          onChange={(e) =>
                                            setEditingEmployee({ ...editingEmployee, role: e.target.value })
                                          }
                                          disabled={isSubmitting}
                                        />
                                      </div>
                                      <div className="flex items-center space-x-2">
                                        <Switch
                                          id="edit-active"
                                          checked={editingEmployee.is_active}
                                          onCheckedChange={(checked) =>
                                            setEditingEmployee({ ...editingEmployee, is_active: checked })
                                          }
                                           disabled={isSubmitting}
                                        />
                                        <Label htmlFor="edit-active">Active</Label>
                                      </div>
                                    </div>
                                    <DialogFooter>
                                      <Button variant="outline" onClick={() => setIsEditDialogOpen(false)} disabled={isSubmitting}>
                                        Cancel
                                      </Button>
                                      <Button onClick={handleEditEmployee} disabled={isSubmitting}>
                                        {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                                        {isSubmitting ? 'Saving...' : 'Save Changes'}
                                      </Button>
                                    </DialogFooter>
                                  </DialogContent>
                                )}
                              </Dialog>
                              {/* Delete Button (using soft delete/deactivate) */}
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleDeleteEmployee(employee.id)}
                                className="text-destructive hover:text-destructive"
                                disabled={isSubmitting || !employee.is_active} // Disable if already inactive or submitting
                                title={employee.is_active ? "Deactivate Employee" : "Employee is Inactive"}
                              >
                                <Trash className="h-4 w-4" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={6} className="h-24 text-center">
                          No employees found matching your search criteria.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}